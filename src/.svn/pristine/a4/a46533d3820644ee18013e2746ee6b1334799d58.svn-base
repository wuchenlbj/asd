import {
  loginByUsername,
  logout,
  getInfo,
  getUserRoleInfo
} from 'api/login'
import Cookies from 'js-cookie'
import {
  getToken,
  setToken,
  removeToken
} from '@/utils/auth'

const user = {
  state: {
    login: '',
    user: null, // 用户对象
    name: '',
    token: getToken(),
    avatar: ''

  },

  mutations: {
    SET_LOGIN: (state, name) => {
      state.login = name
    },
    SET_TOKEN: (state, token) => {
      state.token = token
    },
    SET_NAME: (state, name) => {
      state.name = name
    },
    SET_AVATAR: (state, avatar) => {
      state.avatar = avatar
    },
    SET_USER: (state, user) => {
      state.user = user
    },
    LOGOUT_USER: state => {
      state.user = ''
    }
  },

  actions: {
    // 用户名登录
    LoginByUsername({
      commit
    }, userInfo) {

      const username = userInfo.UserName.trim()
      return new Promise((resolve, reject) => {
        loginByUsername(username, userInfo.UserPwd).then(response => {

          const data = response.data
          if (data && data.ticket) {
            setToken(response.data.ticket)
            commit('SET_TOKEN', data.ticket)
            resolve()
          } else {
            reject(data.error)
          }
        }).catch(error => {
          reject(error)
        })
      })
    },
    // 获取用户信息
    GetInfo({
      commit,
      state
    }) {

      let p1 = new Promise((resolve, reject) => {

        getInfo(state.token).then(response => {
          const data = response.data
          commit('SET_LOGIN', data.Login)
          commit('SET_NAME', data.Name)
          commit('SET_AVATAR', data.SEX === '0' ? ('static/images/male.png') : ('static/images/female.png'))
          commit('SET_USER', data)
          resolve(response)
        })
      })

      p1.then(function (data) {
        getUserRoleInfo(state.token).then(response => {
          if (!response.data || response.data.hasOwnProperty('Error')) { // 由于mockjs 不支持自定义状态码只能这样hack
          }
          const roledata = response.data
        })
      })
      return  p1
    },
    // 登出
    LogOut({
      commit,
      state
    }) {
      return new Promise((resolve, reject) => {
        logout(state.token).then(() => {
          commit('SET_TOKEN', '')
          commit('SET_LOGIN', '')
          commit('SET_USER', null)
          commit('SET_ROLES', [])
          removeToken()
          resolve()
        }).catch(error => {
          reject(error)
        })
      })
    },

    // 前端 登出
    FedLogOut({
      commit
    }) {
      return new Promise(resolve => {
        commit('SET_TOKEN', '')
        removeToken()
        resolve()
      })
    },

    // 动态修改权限
    ChangeRole({
      commit
    }, role) {
      return new Promise(resolve => {
        const data = response.data
        commit('SET_ROLES', [role])
        commit('SET_TOKEN', role)
        Cookies.set('Admin-Token', role)
        resolve()
      })
    }
  }
}

export default user
