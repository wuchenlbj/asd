<!-- 文档上传 -->
<template>
  <div class="uploader-container">
    <slot>
      <!-- 只有在没有要分发的内容时才会显示。 -->
    </slot>
    <div style="margin-bottom:10px;" v-show="!disabledBtn">

      <el-dropdown :show-timeout='0' placement='bottom' mode="horizontal" style="">
        <el-button id="filePicker" type="primary" icon="el-icon-upload2" style="width:100px;padding:0px;">上传</el-button>
        <el-dropdown-menu slot="dropdown">
          <el-dropdown-item :disabled="disabledBtn">
            <a data-menu-id="b-menu1" class="g-button-menu  upload-wrapper" href="javascript:void(0);">上传文件夹
              <form class="h5-uploader-form" action="javascript:void(0);">
                <input title="点击选择文件夹" id="h5Input2" multiple="" webkitdirectory="" accept="*/*" type="file" name="html5uploader" style="position:absolute;opacity:0;top:0;left:0;width:100%;height:100%;cursor:pointer;">
              </form>
            </a>
          </el-dropdown-item>
        </el-dropdown-menu>
      </el-dropdown>

      <el-button-group :style="{display:'true'}">
        <el-button @click="delrow">删除</el-button>
      </el-button-group>

      <el-tag v-if="xmxxSelectRow&&xmxxSelectRow.length>0" closable type="warning">已选择项目{{xmxxSelectRow.length}} 个</el-tag>
      <el-tag v-else-if="xmxxRow" closable type="warning">已选择项目1个 </el-tag>
    </div>
    <!-- 导航部分 -->
    <div class="toptext">
      <span class="toptext-l" :class="{toptextshow:!toptextshow}">全部文件</span>
      <span class="toptext-l2" @click="goLastfile()" :class="{toptextshow: toptextshow}">返回上一级&nbsp;|</span>
      <ul :class="{toptextshow:toptextshow,'FuIxtL':true}">
        <li v-for="(item,index) in filelevelString" :key="index">
          <a class="toptext-l2" v-if="filelevelString.length !==(index+1)" @click="goLastnfile((filelevelString.length-1-index))">{{item.name}}</a>
          <a style="cursor:auto" v-else>{{item.name}}</a>
          <span v-if="filelevelString.length !==(index+1)">></span>
        </li>
      </ul>

      <span class="toptext-r">已全部加载，共{{tableData.length}}个</span>
    </div>
    <!-- 表格内容 -->
    <el-table :data="tableData" v-loading="listLoading" @select='selectRow' @select-all='selectallRow' :empty-text="emptytext" element-loading-text="正在查询,请稍后！" @row-dblclick="rowdblclick" border height="230" style="width: 100%" header-row-class-name="headclass">
      <el-table-column type="selection" width="55"></el-table-column>
      <el-table-column label="文件名" min-width="300px">
        <template slot-scope="scope">
          <div class="filecion" :class="scope.row.iconClass"></div>
          <span class="span-title" v-if="!scope.row.edit&&scope.row.TYPE=='0'" @click="gonext(scope.row)">{{scope.row.MC}}</span>
          <a class="span-title" v-if="scope.row.TYPE=='1'" :href="actionurl+'filename='+scope.row.MC+'&filepath='+scope.row.PATH">{{scope.row.MC}}</a>
          <el-input v-if="scope.row.edit" autofocus style="width:200px;" size="small" v-model="scope.row.MC"></el-input>
        </template>

      </el-table-column>
      <el-table-column label="大小" width="180">
        <template slot-scope="scope">
          <span>{{scope.row.WJSIZE|bytesToSize}}</span>
        </template>
      </el-table-column>
      <el-table-column label="时间" prop="XGSJ"></el-table-column>
    </el-table>

    <!-- 上传列表 -->
    <div class="uploadlist" v-show="isshow" @dblclick="tooglewin">
      <div class="uphead">
        <span style="margin-left:20px;color:#424e67;">{{tipuptitle}}</span>
        <i class="el-alert__closebtn el-icon-close"></i>
      </div>
      <div class="upgroupbody">
        <div class="queueList" style="width:700px;">
          <div class="uploader-list-header">
            <div class="file-name">文件(夹)名</div>
            <div class="file-size">大小</div>
            <div class="file-status">状态</div>
            <div class="file-time">剩余时间</div>
            <div class="file-operate">操&nbsp;&nbsp;作</div>
          </div>
        </div>
      </div>
    </div>

  </div>
</template>

<script>
import _ from 'lodash'
import md5 from 'js-md5'
import { mapGetters } from 'vuex'
import { getFilderConfig, getFileLists, savexmToqd } from "api/xmwdqd/index.js"
import msg from 'utils/loadmsg'
import { getdocList, dropFile, saveFileXMData } from 'api/filelist'
import bus from 'components/bus'

window.MD5 = null
var $ = require('jquery')
import webuploader from 'webuploader'
window.WebUploader = webuploader

export default {
  name: "wdsc",
  data() {
    return {
      actionurl: process.env.WDK_BASE_API + 'api/DocDownload/GetFileInfo?',
      fileQueryList: [], // 返回的文件信息 上传完毕统一保存
      mrData: [], // 默认配置
      xmData: [], // 单个项目配置
      xmFLData: [], // 项目分类配置
      folderfid: '', // 文件的父id
      foldername: '',
      selectRows: [], // 勾选行
      rootIds: [],// 清单id数组
      curQDid: '', // 当前的清单id
      disabledBtn: true,
      tipuptitle: '上传列表',
      emptytext: '请先选择上传资料的项目',
      tableData: [], // 表格数据
      initTableData: [], // 清单的分级数据     
      query: {
        type: '1',
        qdid: '',
        id: '',
        rows: [],
        docids: []
      },
      isshow: false,
      filelevel: [], // 文件层级
      listLoading: false,
      toptextshow: true,
      fileToFloder: null,
      filedata: [], // 上传数据列表
      percentages: {}, // 所有文件的进度信息，key为file id
      uploader: null, // WebUploader实例 
      BASE_API: process.env.WDK_BASE_API,
      MD5: MD5, // 文件数据加密
      state: 'pedding', // 可能有pedding, ready, uploading, confirm, done.
      fileCount: 0, // 添加的文件数量
      fileSize: 0 // 添加的文件总大小
    }
  },
  props: {
    // 处理合同
    Page: {
      type: String,
      default: ''
    }
  },
  watch: {
    Page: function (val) {
      this.watchHTPage(val)
    },
    xmxxRow: function (row) {
      if (!row) return
      // 根据项目查询文档类型
      this.filelevel = []
      this.query = {
        rows: [row],
        type: 3,
        id: this.moduleid
      }
      this.getFileList(0, this.$route.name)
    },
    xmxxSelectRow: function (rows) {
      this.query = {
        rows: rows,
        type: 1,
        id: this.moduleid
      }
      // 查询数据
      this.getFileList(0, this.$route.name)
    }
  },
  computed: {
    ...mapGetters(['token', 'moduleid', 'xmxxRow', 'xmxxSelectRow']),
    filelevelString() {
      // 如果是合同模块
      if (this.Page.indexOf('HT') > -1) {
        if (this.filelevel.length >= 1) {
          this.toptextshow = false
        } else {
          this.toptextshow = true
        }
        if (this.filelevel.length >= 2) {
          this.disabledBtn = false

        } else {
          this.disabledBtn = true
        }
      } else {
        if (this.filelevel.length >= 1) {
          this.disabledBtn = false
          this.toptextshow = false
        } else {
          this.disabledBtn = true
          this.toptextshow = true
        }
      }
      // 不在此显示 
      if (this.query.name == "验收申报材料") {
        this.disabledBtn = true
      }
      return this.filelevel
    }
  },
  mounted: function () {
    this.folderfid = this.moduleid  // 获取根id  

    // 初始化上传控件
    this.fileToFloder = document.getElementById('h5Input2')
    this.fileToFloder.onchange = this.changefile
    this.initUpload()

    this.watchHTPage(this.Page)
  },
  methods: {
    // 处理合同查询
    watchHTPage(val) {
      if (val.indexOf('HT') > -1) {
        this.filelevel = []
        this.query = {
          rows: [this.xmxxRow],
          type: 3,
          id: this.moduleid
        }
        this.curQDid = '59544ab4-f1fe-402c-9a83-aa5d63debdf2' // 合同的清单id
        this.getFileList(0, this.$route.name)
      }
    },
    // 1.根据选择的项目上传文件或文件夹  cttype 穿透类型 1 添加导航数组
    getFileList(cttype, name) {
      var _this = this

      if (this.query.rows.length == 0) {
        this.tableData = []
        return false
      }

      this.listLoading = true

      this.query.qdid = this.curQDid // 传递

      // 获取配置信息
      getFileLists(this.query).then(response => {
        this.listLoading = false

        // 添加导航数据        
        if (cttype === 1) {
          this.filelevel.push({ id: _this.folderfid, name: name })
        }

        this.tableData = this._setIcon(response.data)
      }).catch(e => {
        this.listLoading = false
      })
    },
    // 返回所属清单文件夹
    getXMQDFolder(pid, data) {
      return data.filter(v => {
        if (v.PID == pid) return v
      })
    },
    // 表格数据行双击事件
    rowdblclick(row, event) {
      this.gonext(row)
    },
    // 打开文件夹下级
    gonext(row) {
      if (row.TYPE == '0') { // 文件夹穿透
        // 赋值当前清单id
        if ($.inArray(row.ID, this.rootIds) > -1) {
          this.curQDid = row.ID
        }
        this.getList(row.ID, 1, row.MC)
      } else { // 文件下载

      }
    },
    // 下载文件
    downloadfile() {

    },
    // 获取数据
    getList(id, cttype, name) {
      this.folderfid = id

      if (id) {
        this.query.id = id
        this.query.name = name
      }
      this.getFileList(cttype, name)
    },
    // 返回n层
    goLastnfile(level) {
      this.filelevel = _.dropRight(this.filelevel, level)  // 删除n层      
      if (this.filelevel && this.filelevel.length > 0) {
        var lastfilelevel = _.last(this.filelevel) // 获取当前row
        this.getList(lastfilelevel.id, -1, lastfilelevel.name)
      } else {
        this.query.id = this.moduleid
        this.query.name = this.$route.name
        this.getFileList(0, this.$route.name)
      }
    },
    // 返回上一层
    goLastfile() {
      this.goLastnfile(1)//
    },
    // 选择文件夹获取数据
    changefile(e) {
      e.preventDefault()

      var files = this.fileToFloder.files;
      var table = {};
      this.isshow = true
      for (var i = 0; i < files.length; i++) {
        var f = files[i];
        this.uploader.addFiles(f) // 将文件添加到队列中去        

        var dt = new Date(f.lastModified);

        table[i] = {
          path: f.webkitRelativePath,
          size: f.size,
          modified: dt.toLocaleString()
        };
      }

    },
    // 保存信息入库
    saveXMXX(file, filephpath, index) {
      console.info('saveXMXX:x=下标：' + index + '====' + filephpath)
      var rows = this.query.rows
      console.info(rows)
      if (rows.length == 0) {
        msg.showwarning('没有获取到项目信息，请选择')
      }
      var fileserverpath = file.source.source.webkitRelativePath
      var fileQuery = {
        rows: rows,
        qdid: this.curQDid,
        filepid: this.folderfid,
        filename: file.name,
        filesize: file.size,
        fileext: file.ext,
        filephpath: filephpath,
        fileserverpath: fileserverpath
      }
      this.fileQueryList.push(fileQuery) // 等待队列完毕统一上传   
      // console.info(this.fileQueryList)
    },
    // 初始化上传
    initUpload() {
      var _this = this
      var $wrap = $('.uploader-container')
      var $queue = $('<ul class="filelist"></ul>').appendTo($wrap.find('.queueList'))

      this.browserjudge() // 1.浏览器判断
      this.beforesend() // 2.before-send验证 做分片验证
      var GUID = WebUploader.Base.guid()
      // 3.初始化
      this.uploader = WebUploader.create({
        swf: '../../../static/webupload/js/Uploader.swf',    // swf文件路径
        server: _this.BASE_API + 'api/UpFile/UpFile', // 文件接收服务端。
        pick: '#filePicker',    // 选择文件的按钮。可选。 内部根据当前运行是创建，可能是input元素，也可能是flash.
        auto: true, // 自动上传选择的文件
        chunked: true,
        chunkSize: 10 * 1024 * 1024, // 默认分片5M
        headers: {
          'ticket': _this.token,
          'moduleid': _this.moduleid || ''
        },
        formData: {
          uid: 123,
          guid: GUID,
          parentid: _this.folderfid,
          yspath: '', // 原始路径
          md5: _this.MD5 // 传递md5值
        },
        duplicate: true, //去重
        fileNumLimit: 300,
        fileSizeLimit: 200000 * 1024 * 1024,    // 200000 M
        fileSingleSizeLimit: 100000 * 1024 * 1024,    // 100000 M
        resize: false // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
      })

      // 准备事件
      this.uploader.on('ready', function () {
        window.uploader = _this.uploader
      })
      // 准备事件
      this.uploader.on('beforeFileQueued', function (file) {

        if (_this.disabledBtn) {
          msg.showwarning('请在文件夹中进行上传操作')
          return false
        }
        // 选择项目必须
        if ((_this.xmxxSelectRow && _this.xmxxSelectRow.length == 0) || (_this.xmxxRow && _this.xmxxRow.length == 0)) {
          msg.showwarning('请选择项目之后再进行文件上传')
          return false
        }
        if (!_this.folderfid) {
          msg.showwarning('没有获取到文件fid')
          return false
        }
      })

      // 事件0
      this.uploader.on('fileQueued', function (file) {
        _this.fileCount++ // 文件总数
        var fileext = ''
        if (file.ext.toLowerCase() === 'png' || file.ext.toLowerCase() === 'jpg') {
          fileext = 'fileicon-small-pic'
        } else if (file.ext === 'zip' || file.ext === 'rar') {
          fileext = 'fileicon-small-zip'
        } else if (file.ext === 'exe') {
          fileext = 'fileicon-small-exe'
        } else {
          fileext = 'default-small'
        }

        var $li = $('<li class="file-list" id="' + file.id + '">' +
          ' <div class="process"></div>' +
          '<div class="info">' +
          '<div class="file-name" title="' + file.name + '">' +
          '<div class="file-icon ' + fileext + '"></div>' +
          '<span class="name-text">' + file.name + '</span>' +
          '</div>' +
          '<div class="file-size">' + WebUploader.formatSize(file.size) + '</div>' +
          '<div class="file-state">' +
          '</div>' +
          '<div class="file-time"><em></em>' +
          '</div>' +
          '<div class="file-operate">' +
          '</div>' +
          '</div>' +
          '</li>')

        // 将操作按钮添加到li中
        var $filestate = $li.find('.file-state')
        var $prepare = $('<span class="prepare">准备上传…</span>').appendTo($filestate)
        var $uploading = $('<span class="uploading"><em class="precent">0%</em></span>').appendTo($filestate)
        var $pause = $('<span class="pause"><em></em><i>已暂停</i></span>').appendTo($filestate)
        var $cancel = $('<span class="cancel"><em></em><i>已取消</i></span>').appendTo($filestate)
        var $error = $('<span class="error"><em></em><i>上传失败</i></span>').appendTo($filestate)
        var $success = $('<span class="success"><em></em><i style="margin-left:20px;">上传成功</i></span>').appendTo($filestate)

        var $fileoperate = $li.find('.file-operate')
        var $operatepause = $('<em class="operate-pause" title="暂停"></em>').appendTo($fileoperate)
        var $operatecontinue = $('<em class="operate-continue"  title="上传"></em>').appendTo($fileoperate)
        var $operateretry = $('<em class="operate-retry"  title="重新上传"></em>').appendTo($fileoperate)
        var $operateremove = $('<em class="operate-remove"  title="移除"></em>').appendTo($fileoperate)

        $li.appendTo($queue) // 添加ul

        _this.showState('prepare', file) // ==========准备上传

        // 点击上传
        $operatecontinue.on('click', function () {
          _this.uploader.upload(file)
        })
        // 点击暂停
        $operatepause.on('click', function () {
          _this.uploader.stop(file)
          _this.showState('pause', file) // 已暂停
        })
        // 移除文件
        $operateremove.on('click', function () {
          _this.uploader.removeFile(file)
        })

        // 文件状态监听
        file.on('statuschange', function (cur, prev) {
          if (cur === 'error' || cur === 'invalid') {

          } else if (cur === 'interrupt') {
            var $li = $('#' + file.id)
            $li.find('.operate-retry').show().siblings().hide()
          }
        })

        file.setStatus('queued')  // 已经进入队列, 等待上传
      })

      // 文件开始上传记录时间
      this.uploader.on('uploadStart', function (file) {
        file.scsj = new Date() // 文件的上传时间
      })
      // 事件0 当一批文件添加进队列以后触发 当有文件添加进来时执行，负责view的创建
      this.uploader.on('filesQueued', function (file) {
        _this.isshow = true
      })

      // 事件1 上传过程中触发，携带上传进度
      this.uploader.on('uploadProgress', function (file, percentage) {
        var t = (new Date() - file.scsj) / 1000 // 用时秒数
        var s = file.size * percentage / t
        var speend = WebUploader.formatSize(s) // 平均速度
        var lastt = parseInt(file.size * (1 - percentage) / s) // 剩余秒数
        _this.showState('uploading', file, percentage, speend, lastt) // 上传中
      })

      // 事件2 当文件被移除队列后触发
      this.uploader.on('fileDequeued', function (file) {
        _this.fileCount--
        if (!_this.fileCount) {
        }
        var $li = $('#' + file.id)
        $li.remove()
      })

      // 事件6 当文件上传成功时触发---文件上传成功,合并文件
      this.uploader.on('uploadSuccess', function (file, response) {
        console.info('uploadSuccess')
        if (!response) {
          return
        }

        var $li = $('#' + file.id)
        $li.find('.process').css('width', 0)
        $li.find('.file-time').find('em').text('')
        if (response.chunked) { // 如果存在分片
          // todo显示合并文件中
          $.ajax({
            type: 'POST',
            url: _this.BASE_API + 'api/UpFile/ProcessRequest',
            data: {
              md5: _this.MD5,
              fileName: file.name,
              fileExt: response.f_ext || ''
            },
            beforeSend: function (request) {
              request.setRequestHeader('ticket', _this.token)
              request.setRequestHeader('moduleid', _this.moduleid || '')
            },
            cache: false,
            dataType: 'json'
          }).then(function (data, textStatus, jqXHR) {
            data = $.parseJSON(data)
            if (data.hasError) {
              _this.showState('hbfail', file) // 文件合并失败
            } else {
              //  console.log('合并完成do Something...')
              _this.showState('succss', file) // 上传成功
              _this.isshow = false
              _this.saveXMXX(file, response.path, '2')
            }
          }, function (jqXHR, textStatus, errorThrown) {    // 任何形式的验证失败，都触发重新上传
            console.log(jqXHR)
          })
        } else {  // 无分片上传成功
          _this.showState('succss', file)
          $li.find('.file-operate em').hide()
          _this.isshow = false
          _this.saveXMXX(file, response.path, '3')
        }

        // 重新获取下数据 uploadFinished       
      })
      // 事件 不管成功或者失败，文件上传完成时触发
      this.uploader.on('uploadComplete', function (file) {

        var $li = $('#' + file.id)
        $li.find('.progress').fadeOut() // 隐藏进度条
        $li.find('.file-operate em').hide()

      })
      // 当所有文件上传结束时触发。
      this.uploader.on('uploadFinished', function () {
        console.info('uploadFinished')
        console.info(_this.fileQueryList)
        // 清空队列
        if (_this.fileQueryList.length === 0) {
          msg.showwarning('没有获取到项目信息请重试')
          return false
        }
        // 1.保存文件流信息入库
        saveFileXMData(_this.fileQueryList).then(response => {
          if (response.data.length > 0) {
            _this.query.docids = response.data
            // 如果fid 是根清单 则保存关系
            if ($.inArray(_this.folderfid, _this.rootIds > -1)) {
              // 2.保存项目 文件关系入库
              savexmToqd(_this.query).then(response => {
                _this.fileQueryList = []
                // 3. 获取数据
                _this.getList(_this.folderfid, -1, '')
                bus.$emit('on-getXMInfo')
              }).catch(err => {
                console.log(err)
              })
            } else {
              _this.getList(_this.folderfid, -1, '')
              bus.$emit('on-getXMInfo')
            }

          } else {
            // 3. 获取数据
            _this.getList(_this.folderfid, -1, '')
            bus.$emit('on-getXMInfo')
          }
        })

        _this.uploader.reset()
      })


      // 时间
      this.uploader.on('error', function (type) {
        // console.log('错误类型' + type)
        if (type == 'F_DUPLICATE') {
          msg.showwarning('不能选择相同文件')
        } else if (type == 'Q_EXCEED_NUM_LIMIT') {
          msg.showwarning('添加的文件数量超出限制')
        }
      })
    },
    tooglewin() {
      this.isshow = !this.isshow
    },
    // 更改状态
    showState(state, file, percentage, speed, lasttime) {
      var _this = this
      var $li = $('#' + file.id)
      $li.find('.file-operate em').hide() // 隐藏操作按钮

      switch (state) {
        case 'prepare': // 准备上传
          $li.find('.operate-continue,.operate-remove').show() // 上传 移除按钮
          $li.find('.file-state .prepare').show().siblings().hide()
          break
        case 'prepare': // 上传中
          $li.find('.operate-continue,.operate-remove').show() // 上传 移除按钮
          $li.find('.file-state .prepare').show().siblings().hide()
          break
        case 'pause': // 暂停
          $li.find('.operate-continue,.operate-remove').show() // 上传 移除按钮
          $li.find('.file-state .pause').show().siblings().hide()
          break
        case 'succss':
          $li.find('.file-state .success').show().siblings().hide()
          $li.find('.file-state .success').find('i').text('上传成功')
          break
        case 'mcsuccss':
          $li.find('.file-state .success').show().siblings().hide()
          $li.find('.file-state .success').find('i').text('秒传')
          break
        case 'hbfail':
          $li.find('.file-state .error').show().siblings().hide()
          $li.find('.file-state .error').find('i').text('文件合并失败')
          break
        case 'uploading':
          var n = parseInt(percentage * 100) + '%'
          var $percent = $li.find('.process')

          $percent.css('width', n)  // 进度条
          var time = _this.formatSeconds(lasttime)
          $li.find('.operate-pause,.operate-remove').show() // 暂停按钮
          $li.find('.file-state .uploading').show().siblings().hide()
          $li.find('.file-state .uploading').find('em').text(n + '(' + speed + '/S)')
          $li.find('.file-time').find('em').text(time)
          break

      }
    },
    // 2.before-send验证 做分片验证
    beforesend() {
      var _this = this

      WebUploader.Uploader.register({
        'before-send-file': 'beforeSendFile', // 在文件发送之前request，此时还没有分片（如果配置了分片的话），可以用来做文件整体md5验证。
        'before-send': 'beforeSend' // 在分片发送之前request，可以用来做分片验证，如果此分片已经上传成功了，可返回一个rejected promise来跳过此分片上传
      },
        {
          beforeSendFile: function (file) {

            var me = this,
              owner = this.owner,
              server = me.options.server

            // 秒传验证
            var task = new $.Deferred()
            var start = new Date().getTime()
            _this.uploader.options.formData.md5 = _this.MD5 = md5('' + file.name + file.type + file.lastModifiedDate + file.size)
            console.info('beforeSendFile')
            //
            owner.md5File(file, 0, 10 * 1024 * 1024).progress(function (percentage) {
              // console.log("percentage" + percentage)
            }).then(function (val) {
              $.ajax({
                type: 'POST',
                url: _this.BASE_API + 'api/UpFile/WebGisUpFileIfMd5',
                data: {
                  status: 'md5Check',
                  md5: _this.MD5,
                  fileExt: file.ext,
                  fileName: file.name,
                  parentid: _this.folderfid
                },
                beforeSend: function (request) {
                  request.setRequestHeader('ticket', _this.token)
                  request.setRequestHeader('moduleid', _this.moduleid || '')
                },
                cache: false,
                timeout: 1000, // todo 超时的话，只能认为该文件不曾上传过
                dataType: 'json'
              }).then(function (data, textStatus, jqXHR) {

                if (data.ifExist) {   // 若存在，这返回失败给WebUploader，表明该文件不需要上传 

                  task.reject() // 已失败 
                  _this.uploader.skipFile(file)
                  _this.showState('mcsuccss', file)
                  // 此处属于拦截器，走了这里就不走success--秒传
                  _this.isshow = false
                  // _this.saveXMXX(file, data.path, '1')
                } else {
                  task.resolve() // 已完成
                  // 拿到上传文件的唯一名称，用于断点续传
                  _this.uploader.options.formData.md5 = _this.MD5 = md5('' + file.name + file.type + file.lastModifiedDate + file.size)
                  // $.cookie('file_md5', MD5);
                }
              }
                , function (jqXHR, textStatus, errorThrown) {    // 任何形式的验证失败，都触发重新上传
                  task.resolve()
                  // 拿到上传文件的唯一名称，用于断点续传
                  _this.uploader.options.formData.md5 = _this.MD5 = md5('' + file.name + file.type + file.lastModifiedDate + file.size)
                  // $.cookie('file_md5', MD5);
                })
            })
            console.info('$.when(task)')
            return $.when(task)
          },
          beforeSend: function (block) {
            console.info('beforeSend')
            // 分片验证是否已传过，用于断点续传
            var task = new $.Deferred()
            $.ajax({
              type: 'POST',
              url: _this.BASE_API + 'api/UpFile/WebGisUpFileIfMd5',
              data: {
                status: 'chunkCheck',
                chunkMD5: _this.MD5,
                chunkIndex: block.chunk,
                size: block.end - block.start,
                fileExt: block.file.ext,
                parentid: _this.folderfid
              },
              beforeSend: function (request) {
                request.setRequestHeader('ticket', _this.token)
                request.setRequestHeader('moduleid', _this.moduleid || '')
              },
              cache: false,
              timeout: 1000, // todo 超时的话，只能认为该分片未上传过
              dataType: 'json'
            }).then(function (data, textStatus, jqXHR) {

              // 若存在，返回失败给WebUploader，表明该分块不需要上传
              if (data.ifExist) {
                console.log('已经存在分片' + data.chunkIndex)
                task.reject()
              } else {
                console.log('不存在分片' + data.chunkIndex)
                task.resolve()
              }
            }, function (jqXHR, textStatus, errorThrown) {    // 任何形式的验证失败，都触发重新上传
              task.resolve()
            })

            return $.when(task)
          }
        })
    },
    // 1.浏览器判断
    browserjudge() {
      if (!WebUploader.Uploader.support()) {
        alert('Web Uploader 不支持您的浏览器！如果你使用的是IE浏览器，请尝试升级 flash 播放器')
        throw new Error('WebUploader does not support the browser you are using.')
      }
    },
    formatSeconds(value) {
      var theTime = parseInt(value)// 秒
      var theTime1 = 0// 分
      var theTime2 = 0// 小时
      if (theTime > 60) {
        theTime1 = parseInt(theTime / 60)
        theTime = parseInt(theTime % 60)
        if (theTime1 > 60) {
          theTime2 = parseInt(theTime1 / 60)
          theTime1 = parseInt(theTime1 % 60)
        }
      }
      var result = '' + parseInt(theTime) + '秒'
      if (theTime1 > 0) {
        result = '' + parseInt(theTime1) + '分' + result
      }
      if (theTime2 > 0) {
        result = '' + parseInt(theTime2) + '小时' + result
      }
      return result
    },
    // 删除数据
    delrow() {
      var _this = this;
      if (this.selectRows.length === 0) {
        msg.showwarning("您还未选择任何数据");
        return false;
      }
      this.$confirm("你确定要删除吗？", "删除提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          // 删除数据
          msg.showloading("正在删除,请稍后...");
          dropFile(_this.selectRows).then(response => {
            _.forEach(_this.selectRows, function (value) {
              // 若一个参数，返回的便是其value值
              _this.tableData = _.remove(_this.tableData, function (data) {
                return data.ID != value.ID;
              });
            });
            // 删除成功
            msg.showsuccess("删除成功");
          });
        })
        .catch(() => { });
    },
    // check行事件
    selectRow(selection, row) {
      this.selectRows = selection
    },
    // check所有行事件
    selectallRow(selection) {
      this.selectRows = selection
    },
    // 设置图标
    _setIcon(data) {
      var _this = this
      if (data.length == 0) return []
      return data.map(v => {
        // 获取根级清单id存储 
        if (v.PID == _this.moduleid) {
          _this.rootIds.push(v.ID);
          _this.rootIds = _.uniq(_this.rootIds); // 去重
        }

        v.iconClass = this._getIconClass(v.TYPE, v.WJLX)
        return v
      })

    },
    // 返回相应的icon类
    _getIconClass(type, wjlx) {
      var iconClass = ''
      if (type === '0') {
        iconClass = 'dir-small'
      } else if (type === '1') {
        switch (wjlx) {
          case 'exe':
            iconClass = 'dir-exe'
            break
          case 'zip':
          case 'rar':
            iconClass = 'dir-zip'
            break
          case 'xls':
          case 'xlsx':
            iconClass = 'dir-excel'
            break
          case 'ppt':
          case 'pptx':
            iconClass = 'dir-ppt'
            break
          case 'doc':
          case 'docx':
            iconClass = 'dir-doc'
            break
          case 'png':
          case 'gif':
          case 'jpg':
            iconClass = 'dir-pic'
            break
          default:
            iconClass = 'dir-other'
            break
        }
      }

      return iconClass
    }
  }
}
</script>

<style rel="stylesheet/scss" lang="scss" scoped>
@import url("../../../static/webupload/js/webuploader.css");
@import url("../../../static/webupload/js/style.scss");

.filecion {
  width: 26px;
  height: 26px;
  position: absolute;
  left: 10px;
  top: 5px;
}
.span-title {
  margin-left: 30px;
  cursor: pointer;
}

.span-title:hover {
  color: #4287ed;
}
.dir-small {
  background: url(../../../static/images/Folder.png) center no-repeat;
}

.dir-zip {
  background: url(../../../static/images/zip.png) center no-repeat;
}

.dir-pic {
  background: url(../../../static/images/pic.png) center no-repeat;
}

.dir-exe {
  background: url(../../../static/images/exe.png) center no-repeat;
}

.dir-other {
  background: url(../../../static/images/misc.png) center no-repeat;
}
.dir-excel {
  background: url(../../../static/images/excel.png) center no-repeat;
}
.dir-doc {
  background: url(../../../static/images/word.png) center no-repeat;
}
.dir-ppt {
  background: url(../../../static/images/ppt.png) center no-repeat;
}

.toptext {
  padding-left: 10px;
  width: 100%;
  background-color: #fff;
  height: 16px;
  line-height: 16px;
  margin-bottom: 5px;
  font-size: 13px;
  color: #666;
  display: block;
  position: relative;
  .toptext-l {
    display: block;
    float: left;
  }
  .toptext-l2 {
    color: #4287ed;
    float: left;
    cursor: pointer;
  }
  .toptextshow {
    display: none;
    cursor: pointer;
  }
  .toptext-r {
    position: absolute;
    right: 20px;
    float: right;
  }
}
ul,
li,
ol {
  list-style: none;
}

.FuIxtL {
  height: 16px;
  line-height: 16px;
  margin: 0;
  position: absolute;
  top: 0;
  left: 55px;
}

.FuIxtL li {
  float: left;
}

.FuIxtL li a {
  padding: 0 5px;
}
.navbar {
  height: 50px;
  line-height: 50px;
  border-radius: 0px !important;
  background-color: #fff;
}

.uploadlist {
  display: flex;
  width: 750px;
  box-sizing: border-box;
  border-radius: 4px;
  position: fixed;
  right: 5px;
  bottom: 5px;
  background-color: #fff;
  // overflow: hidden;
  opacity: 1;
  // align-items: center;
  transition: opacity 0.2s;
  z-index: 30000;
  border-top-left-radius: 7px;
  border-top-right-radius: 7px;
  border: 1px solid #e2e2e2;
  box-shadow: 0 0 10px #ccc;
  flex-direction: column;
  .uphead {
    height: 40px;
    line-height: 40px;
    display: block;
    // background-color: red;
    width: 700px;
    cursor: pointer;
  }
  .upgroupbody {
    position: relative;
    overflow: hidden;
    overflow-y: auto;
    height: 349px;
    font-size: 12px;
    .uploader-list-header {
      font-size: 13px;
    }
  }
}
</style>


